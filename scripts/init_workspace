#!/usr/bin/env python

import os
import argparse
from subprocess import Popen

# make sure to set the root directory
ROOT_DIR = os.path.realpath(os.curdir)
ARGS = None
# add more directories here as needed
IGNORE_DIRS = ['catkin', 'scripts', '.git']
NEEDED_DIRS = ['appctl', 'interactivespaces_msgs']

if os.path.basename(ROOT_DIR) == 'scripts':
    os.chdir('..')
if not os.path.isdir('.git'):
    raise Exception('Must run this script from the root'
            ' directory or inside the scripts dir')


def setup_catkin():
    """
    Sets up the catkin dir structure, then creates all links
    """
    make_catkin_dir_structure()
    create_links_in_catkin()
    catkin_init()

def make_catkin_dir_structure():
    """
    creates catkin and catkin/src folders
    """
    check_exists_but_not_dir(ROOT_DIR + '/catkin')
    check_exists_but_not_dir(ROOT_DIR + '/catkin/src')


def check_exists_but_not_dir(location):
    """
    Checks if the location exists, then tries to make a directory there
    Will raise an error if a non-directory thing is there
    """
    if os.path.exists(location) and not os.path.isdir(location):
        raise Exception('%s exists but is not a directory' % location)
    mkdir(location)

def mkdir(location):
    """
    Makes a directory as long as one doesn't exist
    """
    if not os.path.exists(location):
        os.mkdir(location)

def create_links_in_catkin():
    """
    Creates all links from all the ros nodes in the root_dir + any passed as arguments
    """
    ros_nodes = get_ros_nodes()
    os.chdir("%s/catkin/src" % ROOT_DIR)
    create_links(ros_nodes)

def get_ros_nodes():
    """
    Figures out which directories in root_dir + ARGS exist
    returns an array of them
    """
    nodes = ['%s/%s' % (ROOT_DIR, d) for d in os.listdir(ROOT_DIR)
            if os.path.isdir('%s/%s' % (ROOT_DIR, d)) and d not in IGNORE_DIRS]
    global ARGS
    # append any args with paths that exist to our nodes
    append_node(nodes, ARGS.appctl)
    append_node(nodes, ARGS.interactive)
    for arg in ARGS.extra:
        append_node(nodes, arg)
    return nodes

def append_node(nodes, node):
    node = os.path.expanduser(node)
    if not node:
        return
    if not os.path.exists(node):
        return
    while node[-1] == '/':
        node = node[:-1]
    nodes.append(node)

def create_links(nodes):
    """
    Iterates over all nodes to be created, and has a link created for each
    """
    for node in nodes:
        create_link(node)

def create_link(node):
    """
    Creates a link to node named os.path.basename(node) if nothing exists there
    """
    if os.path.exists(os.path.basename(node)):
        return
    os.symlink(node, os.path.basename(node))

def catkin_init():
    """
    Runs catkin_init_workspace in root_dir/catkin/src folder
    """
    os.chdir("%s/catkin/src" % ROOT_DIR)
    try:
        p = Popen("catkin_init_workspace")
        p.wait()
    except OSError:
        raise Exception("Error running catkin_init_workspace, is it not in your PATH?")

def parse_args():
    """
    Simple argument parser
    """
    parser = argparse.ArgumentParser(
            description='initializes a the catkin workspace for this project')
    parser.add_argument('-a', '--appctl', type=str, help='location of appctl directory')
    parser.add_argument('-i', '--interactive', type=str,
            help='location of interactivespaces_msgs directory')
    parser.add_argument('-x', '--extra', type=str, nargs='*', default=[],
            help='a list of any extra paths to ros nodes you want linked to')
    return parser.parse_args()

def check_validity():
    """
    Just checks to see if appctl and interactivespaces_msgs exist in catkin/src
    """
    links = os.listdir("%s/catkin/src" % ROOT_DIR)
    for needed in NEEDED_DIRS:
        if needed not in links:
            print "############## WARNING catkin/src SHOULD HAVE %s LINK ##############" % needed

def main():
    global ARGS
    ARGS = parse_args()
    setup_catkin()
    check_validity()

if __name__ == '__main__':
    main()
