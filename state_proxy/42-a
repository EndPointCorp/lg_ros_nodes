#!/usr/bin/env python
import rospy
import json

from state_handler.srv import CurrentState, ModeQuery
from lg_common.srv import BrowserPool
from std_msgs.msg import String
from appctl.msg import Mode
from urllib2 import urlopen


class StateTracker(object):
    def __init__(self, state_publisher, update_spreadsheet_pub, last_uscs_service,
                 tactile_flag='', display_url_service=None, kiosk_url_service=None):
        self.state_publisher = state_publisher
        self.update_spreadsheet_pub = update_spreadsheet_pub
        self.last_uscs_service = last_uscs_service
        self.last_runway_card = None
        self.ignore_card = 'click!![1,[3,null,[true],[null,null,0],null,null,false,1],1]'
        self.exit_card = 'exit!![1,[],0]'
        self.last_rfid = ''
        self.tactile_flag = tactile_flag
        self.display_url_service = display_url_service
        self.kiosk_url_service = kiosk_url_service

    def handle_runway_cards(self, msg):
        if msg.data == self.exit_card or msg.data == self.ignore_card or msg.data[11] == '3':
            self.last_runway_card = None
            return
        self.last_runway_card = msg.data

    def build_state(self):
        """
        Calls state tracking service and handles all url grabbing
        """
        current_state = self.last_uscs_service().message
        try:
            current_state = json.loads(current_state)
        except:
            rospy.logerr("Error parsing last uscs message as json")
            return

        i = 0
        windows = current_state.get('windows', [])
        for window in windows:
            url = self.grab_url(window, i)
            window[i]['assets'][0] = url
            i += 1

        current_state = self.handle_tactile(current_state)
        return current_state

    def current_state(self, req):
        state = self.build_state()
        return json.dumps(state)

    def handle_tactile(self, state):
        for window in state.get('windows', []):
            if window.get('activity', '') != 'browser':
                continue

            for i in range(len(window.get('assets', []))):
                if 'maps.google.com' in window['assets'][i] and \
                        self.tactile_flag not in window['assets'][i]:
                    window['assets'][i] += self.tactile_flag


    def grab_url(self, window, index=None):
        """
        given a window (from the director message) grab either the kiosk or
        the display current url based on the viewport from the window. Apply
        any tactile changes if maps.google.com is part of the url
        """
        url_service = None
        activity = window.get('activity', None)
        if activity != 'browser':
            return

        viewport = window.get('presentation_viewport', None)
        if viewport is None:
            rospy.info("viewport was None... ignoring")
            return

        # display might be ok to go away, but only once we're sure
        if viewport != 'kiosk' and viewport != 'wall' and viewport != 'display':
            rospy.warn("Unable to determine viewport named (%s)" % viewport)
            return

        if viewport == 'kiosk':
            url_service = self.kiosk_url_service
        elif viewport == 'display' or viewport == 'wall':
            url_service = self.display_url_service

        state = url_service.call()
        try:
            state = json.loads(state)
        except:
            rospy.logwarn("Unable to parse state (%s)" % state)
            raise

        if len(state) > 1:
            rospy.logwarn('There are more than one browser active, the wrong URL might be returned')

        for s in state:
            return s['current_url_normalized']

    def handle_nfc(self, msg):
        self.last_rfid = msg.data
        state = self.build_state()
        state['rfid'] = msg.data
        self.update_spreadsheet_pub.publish(json.dumps(state))

    def current_mode(self, req):
        if self.mode:
            return self.mode
        return ''


def main():
    rospy.init_node('state_tracker')
    current_state_topic = rospy.get_param('~current_state_topic', '/state_tracker/current_state')
    update_spreadsheet_topic = rospy.get_param('~update_spreadsheet_topic', '/rfid/spreadsheet/update')
    tactile_flag = rospy.get_param('~tactile_flag', '')

    # wait for service or kill node
    rospy.wait_for_service('/uscs/message', 10)
    rospy.wait_for_service('/browser_service/wall', 10)
    rospy.wait_for_service('/browser_service/kiosk', 10)

    last_uscs_service = rospy.ServiceProxy('/uscs/message', USCSMessage)
    kiosk_url_service = rospy.ServiceProxy('/browser_service/kiosk', BrowserPool)
    display_url_service = rospy.ServiceProxy('/browser_service/wall', BrowserPool)

    current_state = rospy.Publisher(current_state_topic, String, queue_size=10)
    update_spreadsheet_pub = rospy.Publisher(update_spreadsheet_topic, String, queue_size=10)
    state_tracker = StateTracker(
        current_state, update_spreadsheet_pub, last_uscs_service,
        tactile_flag=tactile_flag, display_url_service=display_url_service,
        kiosk_url_service=kiosk_url_service)

    rospy.Subscriber('/appctl/mode', Mode, state_tracker.handle_mode)
    rospy.Subscriber('/portal_kiosk/runway', String, state_tracker.handle_runway_cards)
    rospy.Subscriber('/rfid/set', String, state_tracker.handle_nfc)

    rospy.Service('/state_tracker/current_mode', ModeQuery, state_tracker.current_mode)
    rospy.Service('/state_tracker/current_state', CurrentState, state_tracker.current_state)
    rospy.spin()

if __name__ == '__main__':
    main()
